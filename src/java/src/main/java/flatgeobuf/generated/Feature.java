// automatically generated by the FlatBuffers compiler, do not modify

package flatgeobuf.generated;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Feature extends Table {
  public static Feature getRootAsFeature(ByteBuffer _bb) { return getRootAsFeature(_bb, new Feature()); }
  public static Feature getRootAsFeature(ByteBuffer _bb, Feature obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Feature __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long fid() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public Geometry geometry() { return geometry(new Geometry()); }
  public Geometry geometry(Geometry obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Value values(int j) { return values(new Value(), j); }
  public Value values(Value obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int valuesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }

  public static int createFeature(FlatBufferBuilder builder,
      long fid,
      int geometryOffset,
      int valuesOffset) {
    builder.startObject(3);
    Feature.addFid(builder, fid);
    Feature.addValues(builder, valuesOffset);
    Feature.addGeometry(builder, geometryOffset);
    return Feature.endFeature(builder);
  }

  public static void startFeature(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addFid(FlatBufferBuilder builder, long fid) { builder.addLong(0, fid, 0L); }
  public static void addGeometry(FlatBufferBuilder builder, int geometryOffset) { builder.addOffset(1, geometryOffset, 0); }
  public static void addValues(FlatBufferBuilder builder, int valuesOffset) { builder.addOffset(2, valuesOffset, 0); }
  public static int createValuesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endFeature(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

