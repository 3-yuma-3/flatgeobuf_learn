// automatically generated by the FlatBuffers compiler, do not modify

package flatgeobuf.generated;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Geometry extends Table {
  public static Geometry getRootAsGeometry(ByteBuffer _bb) { return getRootAsGeometry(_bb, new Geometry()); }
  public static Geometry getRootAsGeometry(ByteBuffer _bb, Geometry obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Geometry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ringCounts(int j) { int o = __offset(4); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int ringCountsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer ringCountsAsByteBuffer() { return __vector_as_bytebuffer(4, 4); }
  public ByteBuffer ringCountsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 4); }
  public long ringLengths(int j) { int o = __offset(6); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int ringLengthsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer ringLengthsAsByteBuffer() { return __vector_as_bytebuffer(6, 4); }
  public ByteBuffer ringLengthsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 4); }
  public long lengths(int j) { int o = __offset(8); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int lengthsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer lengthsAsByteBuffer() { return __vector_as_bytebuffer(8, 4); }
  public ByteBuffer lengthsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 4); }
  public double coords(int j) { int o = __offset(10); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int coordsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer coordsAsByteBuffer() { return __vector_as_bytebuffer(10, 8); }
  public ByteBuffer coordsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 8); }

  public static int createGeometry(FlatBufferBuilder builder,
      int ring_countsOffset,
      int ring_lengthsOffset,
      int lengthsOffset,
      int coordsOffset) {
    builder.startObject(4);
    Geometry.addCoords(builder, coordsOffset);
    Geometry.addLengths(builder, lengthsOffset);
    Geometry.addRingLengths(builder, ring_lengthsOffset);
    Geometry.addRingCounts(builder, ring_countsOffset);
    return Geometry.endGeometry(builder);
  }

  public static void startGeometry(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addRingCounts(FlatBufferBuilder builder, int ringCountsOffset) { builder.addOffset(0, ringCountsOffset, 0); }
  public static int createRingCountsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startRingCountsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRingLengths(FlatBufferBuilder builder, int ringLengthsOffset) { builder.addOffset(1, ringLengthsOffset, 0); }
  public static int createRingLengthsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startRingLengthsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLengths(FlatBufferBuilder builder, int lengthsOffset) { builder.addOffset(2, lengthsOffset, 0); }
  public static int createLengthsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startLengthsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCoords(FlatBufferBuilder builder, int coordsOffset) { builder.addOffset(3, coordsOffset, 0); }
  public static int createCoordsVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startCoordsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endGeometry(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 10);  // coords
    return o;
  }
}

