// automatically generated by the FlatBuffers compiler, do not modify

package flatgeobuf.generated;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Header extends Table {
  public static Header getRootAsHeader(ByteBuffer _bb) { return getRootAsHeader(_bb, new Header()); }
  public static Header getRootAsHeader(ByteBuffer _bb, Header obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Header __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public double envelope(int j) { int o = __offset(6); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int envelopeLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer envelopeAsByteBuffer() { return __vector_as_bytebuffer(6, 8); }
  public ByteBuffer envelopeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 8); }
  public int geometryType() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int dimensions() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 2; }
  public Column columns(int j) { return columns(new Column(), j); }
  public Column columns(Column obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int columnsLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public Column columnsByKey(String key) { int o = __offset(12); return o != 0 ? Column.__lookup_by_key(null, __vector(o), key, bb) : null; }
  public Column columnsByKey(Column obj, String key) { int o = __offset(12); return o != 0 ? Column.__lookup_by_key(obj, __vector(o), key, bb) : null; }
  public long featuresCount() { int o = __offset(14); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean fids() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : true; }
  public Index index() { return index(new Index()); }
  public Index index(Index obj) { int o = __offset(18); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Srs srs() { return srs(new Srs()); }
  public Srs srs(Srs obj) { int o = __offset(20); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createHeader(FlatBufferBuilder builder,
      int nameOffset,
      int envelopeOffset,
      int geometry_type,
      int dimensions,
      int columnsOffset,
      long features_count,
      boolean fids,
      int indexOffset,
      int srsOffset) {
    builder.startObject(9);
    Header.addFeaturesCount(builder, features_count);
    Header.addSrs(builder, srsOffset);
    Header.addIndex(builder, indexOffset);
    Header.addColumns(builder, columnsOffset);
    Header.addEnvelope(builder, envelopeOffset);
    Header.addName(builder, nameOffset);
    Header.addFids(builder, fids);
    Header.addDimensions(builder, dimensions);
    Header.addGeometryType(builder, geometry_type);
    return Header.endHeader(builder);
  }

  public static void startHeader(FlatBufferBuilder builder) { builder.startObject(9); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addEnvelope(FlatBufferBuilder builder, int envelopeOffset) { builder.addOffset(1, envelopeOffset, 0); }
  public static int createEnvelopeVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startEnvelopeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addGeometryType(FlatBufferBuilder builder, int geometryType) { builder.addByte(2, (byte)geometryType, (byte)0); }
  public static void addDimensions(FlatBufferBuilder builder, int dimensions) { builder.addByte(3, (byte)dimensions, (byte)2); }
  public static void addColumns(FlatBufferBuilder builder, int columnsOffset) { builder.addOffset(4, columnsOffset, 0); }
  public static int createColumnsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startColumnsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFeaturesCount(FlatBufferBuilder builder, long featuresCount) { builder.addLong(5, featuresCount, 0L); }
  public static void addFids(FlatBufferBuilder builder, boolean fids) { builder.addBoolean(6, fids, true); }
  public static void addIndex(FlatBufferBuilder builder, int indexOffset) { builder.addOffset(7, indexOffset, 0); }
  public static void addSrs(FlatBufferBuilder builder, int srsOffset) { builder.addOffset(8, srsOffset, 0); }
  public static int endHeader(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishHeaderBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedHeaderBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

