// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatGeobuf
{

using global::System;
using global::FlatBuffers;

public struct Index : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Index GetRootAsIndex(ByteBuffer _bb) { return GetRootAsIndex(_bb, new Index()); }
  public static Index GetRootAsIndex(ByteBuffer _bb, Index obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Index __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort NodeSize { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)16; } }
  public byte OffsetSize { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)4; } }

  public static Offset<Index> CreateIndex(FlatBufferBuilder builder,
      ushort node_size = 16,
      byte offset_size = 4) {
    builder.StartObject(2);
    Index.AddNodeSize(builder, node_size);
    Index.AddOffsetSize(builder, offset_size);
    return Index.EndIndex(builder);
  }

  public static void StartIndex(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddNodeSize(FlatBufferBuilder builder, ushort nodeSize) { builder.AddUshort(0, nodeSize, 16); }
  public static void AddOffsetSize(FlatBufferBuilder builder, byte offsetSize) { builder.AddByte(1, offsetSize, 4); }
  public static Offset<Index> EndIndex(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Index>(o);
  }
};


}
