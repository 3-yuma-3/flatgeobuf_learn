#ifndef HEADER_BUILDER_H
#define HEADER_BUILDER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef HEADER_READER_H
#include "header_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

#define __GeometryType_formal_args , GeometryType_enum_t v0
#define __GeometryType_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, GeometryType, GeometryType_enum_t)
#define __ColumnType_formal_args , ColumnType_enum_t v0
#define __ColumnType_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, ColumnType, ColumnType_enum_t)

static const flatbuffers_voffset_t __Column_required[] = { 0, 0 };
typedef flatbuffers_ref_t Column_ref_t;
static Column_ref_t Column_clone(flatbuffers_builder_t *B, Column_table_t t);
__flatbuffers_build_table(flatbuffers_, Column, 2)

static const flatbuffers_voffset_t __Crs_required[] = { 0 };
typedef flatbuffers_ref_t Crs_ref_t;
static Crs_ref_t Crs_clone(flatbuffers_builder_t *B, Crs_table_t t);
__flatbuffers_build_table(flatbuffers_, Crs, 5)

static const flatbuffers_voffset_t __Header_required[] = { 0 };
typedef flatbuffers_ref_t Header_ref_t;
static Header_ref_t Header_clone(flatbuffers_builder_t *B, Header_table_t t);
__flatbuffers_build_table(flatbuffers_, Header, 11)

#define __Column_formal_args , flatbuffers_string_ref_t v0, ColumnType_enum_t v1
#define __Column_call_args , v0, v1
static inline Column_ref_t Column_create(flatbuffers_builder_t *B __Column_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Column, Column_file_identifier, Column_type_identifier)

#define __Crs_formal_args ,\
  flatbuffers_string_ref_t v0, int32_t v1, flatbuffers_string_ref_t v2, flatbuffers_string_ref_t v3, flatbuffers_string_ref_t v4
#define __Crs_call_args ,\
  v0, v1, v2, v3, v4
static inline Crs_ref_t Crs_create(flatbuffers_builder_t *B __Crs_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Crs, Crs_file_identifier, Crs_type_identifier)

#define __Header_formal_args ,\
  flatbuffers_string_ref_t v0, flatbuffers_double_vec_ref_t v1, GeometryType_enum_t v2, flatbuffers_bool_t v3,\
  flatbuffers_bool_t v4, flatbuffers_bool_t v5, flatbuffers_bool_t v6, Column_vec_ref_t v7,\
  uint64_t v8, uint16_t v9, Crs_ref_t v10
#define __Header_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7,\
  v8, v9, v10
static inline Header_ref_t Header_create(flatbuffers_builder_t *B __Header_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Header, Header_file_identifier, Header_type_identifier)

__flatbuffers_build_string_field(0, flatbuffers_, Column_name, Column)
__flatbuffers_build_scalar_field(1, flatbuffers_, Column_type, ColumnType, ColumnType_enum_t, 1, 1, UINT8_C(0), Column)

static inline Column_ref_t Column_create(flatbuffers_builder_t *B __Column_formal_args)
{
    if (Column_start(B)
        || Column_name_add(B, v0)
        || Column_type_add(B, v1)) {
        return 0;
    }
    return Column_end(B);
}

static Column_ref_t Column_clone(flatbuffers_builder_t *B, Column_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Column_start(B)
        || Column_name_pick(B, t)
        || Column_type_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Column_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, Crs_org, Crs)
__flatbuffers_build_scalar_field(1, flatbuffers_, Crs_code, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), Crs)
__flatbuffers_build_string_field(2, flatbuffers_, Crs_name, Crs)
__flatbuffers_build_string_field(3, flatbuffers_, Crs_description, Crs)
__flatbuffers_build_string_field(4, flatbuffers_, Crs_wkt, Crs)

static inline Crs_ref_t Crs_create(flatbuffers_builder_t *B __Crs_formal_args)
{
    if (Crs_start(B)
        || Crs_org_add(B, v0)
        || Crs_code_add(B, v1)
        || Crs_name_add(B, v2)
        || Crs_description_add(B, v3)
        || Crs_wkt_add(B, v4)) {
        return 0;
    }
    return Crs_end(B);
}

static Crs_ref_t Crs_clone(flatbuffers_builder_t *B, Crs_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Crs_start(B)
        || Crs_org_pick(B, t)
        || Crs_code_pick(B, t)
        || Crs_name_pick(B, t)
        || Crs_description_pick(B, t)
        || Crs_wkt_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Crs_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, Header_name, Header)
__flatbuffers_build_vector_field(1, flatbuffers_, Header_envelope, flatbuffers_double, double, Header)
__flatbuffers_build_scalar_field(2, flatbuffers_, Header_geometry_type, GeometryType, GeometryType_enum_t, 1, 1, UINT8_C(0), Header)
__flatbuffers_build_scalar_field(3, flatbuffers_, Header_hasZ, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), Header)
__flatbuffers_build_scalar_field(4, flatbuffers_, Header_hasM, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), Header)
__flatbuffers_build_scalar_field(5, flatbuffers_, Header_hasT, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), Header)
__flatbuffers_build_scalar_field(6, flatbuffers_, Header_hasTM, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), Header)
__flatbuffers_build_table_vector_field(7, flatbuffers_, Header_columns, Column, Header)
__flatbuffers_build_scalar_field(8, flatbuffers_, Header_features_count, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), Header)
__flatbuffers_build_scalar_field(9, flatbuffers_, Header_index_node_size, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(16), Header)
__flatbuffers_build_table_field(10, flatbuffers_, Header_crs, Crs, Header)

static inline Header_ref_t Header_create(flatbuffers_builder_t *B __Header_formal_args)
{
    if (Header_start(B)
        || Header_features_count_add(B, v8)
        || Header_name_add(B, v0)
        || Header_envelope_add(B, v1)
        || Header_columns_add(B, v7)
        || Header_crs_add(B, v10)
        || Header_index_node_size_add(B, v9)
        || Header_geometry_type_add(B, v2)
        || Header_hasZ_add(B, v3)
        || Header_hasM_add(B, v4)
        || Header_hasT_add(B, v5)
        || Header_hasTM_add(B, v6)) {
        return 0;
    }
    return Header_end(B);
}

static Header_ref_t Header_clone(flatbuffers_builder_t *B, Header_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Header_start(B)
        || Header_features_count_pick(B, t)
        || Header_name_pick(B, t)
        || Header_envelope_pick(B, t)
        || Header_columns_pick(B, t)
        || Header_crs_pick(B, t)
        || Header_index_node_size_pick(B, t)
        || Header_geometry_type_pick(B, t)
        || Header_hasZ_pick(B, t)
        || Header_hasM_pick(B, t)
        || Header_hasT_pick(B, t)
        || Header_hasTM_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Header_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* HEADER_BUILDER_H */
